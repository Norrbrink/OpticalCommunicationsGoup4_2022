'''
I think that there might be a better way to do this numerically, by using the fraction of 
energy in the core and cladding. Basically (from L6 notes): 
n_m**2=energy_frac_core*n1**2 + energy_frac_cladding*n2**2

So we might be able to find a proper function n_m(lambda) and then use that to find the
derivative here... 
But this is more of a guess than anything so might see/go ask at office hour


'''


import scipy as sp
import numpy as np
from scipy.misc import derivative

wavelength=np.array(630e-9)
c=3e8 
neff=1.474046618
wavelength_array=np.array((620e-9, 625e-9, 630e-9, 635e-9, 640e-9))
#%%
def n_eff(x):
    xn=np.array(x)
    beta=14701123.9
    return (beta*xn)/(2*np.pi)

#%%
d = derivative(n_eff, wavelength_array, dx=1e-3, n=2)

print(d)

#%%
def D_w(l, two_dev):
    #wavelength in nm
    d=(-l/c)*two_dev
    #
    return d

#%%
Waveguide_dispersion=D_w(wavelength_array, d)*(10**(21))

print(Waveguide_dispersion)
#Note waveguide dispersion is in ps/(nm km)